use lonesha256::lonesha256;

const TEST_CASES: &[(&[u8], &[u8])] = &[
    // 0: empty string
    (b"", &[
        0xE3, 0xB0, 0xC4, 0x42, 0x98, 0xFC, 0x1C, 0x14,
        0x9A, 0xFB, 0xF4, 0xC8, 0x99, 0x6F, 0xB9, 0x24,
        0x27, 0xAE, 0x41, 0xE4, 0x64, 0x9B, 0x93, 0x4C,
        0xA4, 0x95, 0x99, 0x1B, 0x78, 0x52, 0xB8, 0x55,
    ]),
    // 1: foobar string
    (b"foobar", &[
        0xC3, 0xAB, 0x8F, 0xF1, 0x37, 0x20, 0xE8, 0xAD,
        0x90, 0x47, 0xDD, 0x39, 0x46, 0x6B, 0x3C, 0x89,
        0x74, 0xE5, 0x92, 0xC2, 0xFA, 0x38, 0x3D, 0x4A,
        0x39, 0x60, 0x71, 0x4C, 0xAE, 0xF0, 0xC4, 0xF2,
    ]),
    // 2: quick brown fox
    (b"The quick brown fox jumps over the lazy dog", &[
        0xD7, 0xA8, 0xFB, 0xB3, 0x07, 0xD7, 0x80, 0x94,
        0x69, 0xCA, 0x9A, 0xBC, 0xB0, 0x08, 0x2E, 0x4F,
        0x8D, 0x56, 0x51, 0xE4, 0x6D, 0x3C, 0xDB, 0x76,
        0x2D, 0x02, 0xD0, 0xBF, 0x37, 0xC9, 0xE5, 0x92,
    ]),
    // 3: random string
    (b"dThNFRWWhyG7pINI", &[
        0x64, 0x13, 0x46, 0x80, 0xDC, 0x26, 0x6E, 0x5D,
        0xFF, 0xE3, 0x83, 0xBD, 0xC4, 0xD1, 0x98, 0xC3,
        0xA3, 0x59, 0x2C, 0x36, 0xB4, 0x78, 0xCE, 0xBE,
        0xD6, 0x6C, 0x15, 0x8F, 0x78, 0x82, 0x5A, 0x28,
    ]),
    // 4: longer string
    (b"laSQWLJtfvdfSvH9MaJC32tk59jpm3ZOkfQX2E308aUqgyqYTq2hOyoLJaujn4ULaFDEb65ISERxjSqovIiccU1q8TxsBwm6qodWbY3mUdPL0YuRrN9RggDzkvHQz91XbpoItjPB7mxtzILtlypZtfJY3A3xh0B4ZrsRM2FTtcircLWRfDOpGIGbQcJoXeZqvKdvzrGbs6oG8wKAYKn51j3aQDNmENXGlYR06eRXFyctEU3gHDaXB6shHCa621wAIPn3ZjtaPzkYjFIQv2NwAnmLCSxOlhqspCoaNVwHfHc6bc3c0Ani6f8Gto3lfrEMwLaPkxOEXuh4SK5w0qWQdahu4LNqoqT7KI7uuwXiMMzw6Y7ySK3u37VJ8msDNI6f0nRHEfROfhK2Yf3FVGItOcNBQDUa4BeuAJgt", &[
        0xCD, 0x6F, 0x3B, 0x5E, 0x08, 0xC3, 0x41, 0x62,
        0xCB, 0xD5, 0x19, 0x0D, 0xA8, 0xCD, 0x45, 0xF7,
        0x63, 0x7E, 0x15, 0x13, 0x8A, 0x39, 0x62, 0x90,
        0x03, 0x68, 0x97, 0xB3, 0x18, 0x84, 0x26, 0xFE,
    ]),
    // 5: 56 spaces
    ("                                                        ".as_bytes(), &[
        0xB6, 0x0C, 0x4C, 0x2D, 0x56, 0x5C, 0xD1, 0xF1,
        0x0E, 0xEB, 0x0D, 0xEF, 0xFD, 0xD7, 0xB6, 0x5F,
        0xDF, 0x9D, 0x4F, 0xD3, 0x96, 0x08, 0x68, 0xDA,
        0x68, 0xE3, 0x53, 0x31, 0x59, 0xB7, 0x0B, 0xD8,
    ]),
];

#[test]
fn test_known_hashes() {
    for (i, (input, expected)) in TEST_CASES.iter().enumerate() {
        let mut output = [0u8; 32];
        lonesha256(&mut output, input).unwrap();
        assert_eq!(&output, expected, "Test case {} failed", i);
    }
}

#[test]
fn test_all_outputs_are_different() {
    let mut outputs = Vec::new();

    for (input, _) in TEST_CASES {
        let mut output = [0u8; 32];
        lonesha256(&mut output, input).unwrap();
        outputs.push(output);
    }

    for (i, out1) in outputs.iter().enumerate() {
        for (j, out2) in outputs.iter().enumerate() {
            if i != j {
                assert_ne!(
                    out1, out2,
                    "Test cases {} and {} produced identical hashes",
                    i, j
                );
            }
        }
    }
}

#[test]
fn test_large_input() {
    let large_input = vec![0xAA; 1024 * 1024]; // 1MB of data
    let mut output = [0u8; 32];
    lonesha256(&mut output, &large_input).unwrap();
    // Updated hash for 1MB of 0xAA bytes
    let expected = [
        0xc4, 0x14, 0x53, 0x64, 0xa3, 0xba, 0x46, 0x00, 0x2f, 0xb1, 0x42, 0x42, 0x87, 0x2f, 0x79,
        0x55, 0x35, 0xba, 0xe6, 0x73, 0x8b, 0x1e, 0x47, 0xba, 0x21, 0xeb, 0x40, 0x5c, 0xfd, 0xf8,
        0x20, 0xa5,
    ];
    assert_eq!(&output, &expected);
}

#[test]
fn test_unicode_input() {
    let input = "Hello, 世界!".as_bytes();
    let mut output = [0u8; 32];
    lonesha256(&mut output, input).unwrap();
    // Updated hash for Unicode string
    let expected = [
        0x7d, 0xe2, 0xf0, 0x64, 0x98, 0xb5, 0xb4, 0xd5, 0x3b, 0x17, 0x00, 0x00, 0xc3, 0x11, 0x10,
        0x1b, 0x55, 0x04, 0x6a, 0x3c, 0x88, 0x9e, 0xfd, 0x54, 0x35, 0x1c, 0xb3, 0x69, 0x7f, 0xcf,
        0x57, 0xcc,
    ];
    assert_eq!(&output, &expected);
}

#[test]
fn test_sequential_hashes() {
    let mut output1 = [0u8; 32];
    let mut output2 = [0u8; 32];

    // Hash first input
    lonesha256(&mut output1, b"first").unwrap();

    // Hash second input
    lonesha256(&mut output2, b"second").unwrap();

    // Results should be different and deterministic
    assert_ne!(&output1, &output2);

    // Hash first input again
    let mut output3 = [0u8; 32];
    lonesha256(&mut output3, b"first").unwrap();

    // Should match first hash
    assert_eq!(&output1, &output3);
}

#[test]
fn test_zero_input() {
    let input = vec![0u8; 64];
    let mut output = [0u8; 32];
    lonesha256(&mut output, &input).unwrap();
    // Updated hash for 64 zero bytes
    let expected = [
        0xf5, 0xa5, 0xfd, 0x42, 0xd1, 0x6a, 0x20, 0x30, 0x27, 0x98, 0xef, 0x6e, 0xd3, 0x09, 0x97,
        0x9b, 0x43, 0x00, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59,
        0xfb, 0x4b,
    ];
    assert_eq!(&output, &expected);
}

#[test]
fn test_error_handling() {
    // Test buffer too small
    let mut small_buf = [0u8; 16];
    assert!(lonesha256(&mut small_buf, b"test").is_err());

    // Test buffer too large
    let mut large_buf = [0u8; 64];
    assert!(lonesha256(&mut large_buf, b"test").is_err());

    // Test correct size
    let mut correct_buf = [0u8; 32];
    assert!(lonesha256(&mut correct_buf, b"test").is_ok());
}

#[test]
fn test_alignment() {
    let mut unaligned_vec = [0u8; 33];
    let unaligned_slice = &mut unaligned_vec[1..33];
    assert!(lonesha256(unaligned_slice, b"test").is_ok());
}
